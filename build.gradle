/**
 * Copyright (C) 2014 Couchbase, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALING
 * IN THE SOFTWARE.
 */

import org.apache.tools.ant.filters.ReplaceTokens

import java.nio.file.Files
import java.nio.file.StandardCopyOption

buildscript {
    repositories {
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '1.2.0'

    id 'checkstyle'
}

apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'propdeps-idea'
apply plugin: 'propdeps-eclipse'
apply plugin: 'jacoco'

group = 'com.couchbase.client'
description = 'Official Couchbase JVM Core Library'

sourceCompatibility = 1.6
targetCompatibility = 1.6

repositories {
    mavenCentral()
    jcenter()
}

checkstyle {
    toolVersion = "6.0"
}

def getVersionName() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--always', '--dirty'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (e) {
        //in case git command is not accessible...
        //put the date in there to have at least a reference point
        return "unknown" + new Date().format("yyyyMMdd");
    }
}

ext {
    nettyVersion = '4.0.30.Final'
    rxVersion = '1.0.14'
    disruptorVersion = '3.3.2'
    jacksonVersion = '2.6.1'
    latencyUtilsVersion = '2.0.2'

    slf4jVersion = '1.7.7'
    commonsVersion = '1.1.3'
    log4jVersion = '1.2.17'

    junitVersion = '4.12'
    mockitoVersion = '1.10.19'

    gitVersion = getVersionName()
}

sourceSets {
    integration
}

configurations {
    integrationCompile.extendsFrom compile, testCompile
    integrationRuntime.extendsFrom runtime, testRuntime
    shadow.extendsFrom optional

    markdownDoclet
}

dependencies {
    compile group: 'io.netty', name: 'netty-all', version: nettyVersion
    compile group: 'io.reactivex', name:'rxjava', version: rxVersion
    compile group: 'com.lmax', name: 'disruptor', version: disruptorVersion
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    compile group: 'org.latencyutils', name: 'LatencyUtils', version: latencyUtilsVersion

    optional group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    optional group: 'commons-logging', name: 'commons-logging', version: commonsVersion
    optional group: 'log4j', name: 'log4j', version: log4jVersion

    shadow group: 'io.reactivex', name:'rxjava', version: rxVersion

    testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile group: 'org.mockito', name: 'mockito-all', version: mockitoVersion

    integrationCompile sourceSets.main.output

    markdownDoclet 'ch.raffael.pegdown-doclet:pegdown-doclet:1.1.1'
}

javadoc {
    doLast {
        copy {
            from "docs"
            into "$buildDir/docs/javadoc"
        }
    }
}
javadoc.options {
    docletpath = configurations.markdownDoclet.files.asType(List)
    doclet = "ch.raffael.doclets.pegdown.PegdownDoclet"
    addStringOption("parse-timeout", "10")

    windowTitle = "Couchbase Java SDK Core IO"
    docTitle = "Couchbase Java SDK Core IO ($project.version)"
    bottom = "Copyright &copy; 2014 Couchbase, Inc."
    links = [
        "http://download.oracle.com/javase/6/docs/api/",
        "http://netty.io/4.0/api/",
        "http://fasterxml.github.io/jackson-databind/javadoc/2.4/",
        "http://reactivex.io/RxJava/javadoc/"
    ]
    overview = "docs/teaser.html"
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integration.output.classesDir
    classpath = sourceSets.integration.runtimeClasspath
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}

task sourcesJar(type: Jar, dependsOn: ':shadowSources') {
    classifier = 'sources'
    //includes all project sources with rewritten imports of relocated shadowed libraries
    //includes rewritten sources for relocated shadowed libraries
    from files("build/shadow/src")
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

shadowJar {
    baseName = 'core-io'
    classifier = ''
    dependencies {
        exclude(dependency(group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion))
        exclude(dependency(group: 'commons-logging', name: 'commons-logging', version: commonsVersion))
        exclude(dependency(group: 'log4j', name: 'log4j', version: log4jVersion))
        exclude(dependency(group: 'io.reactivex', name:'rxjava', version: rxVersion))
    }

    relocate 'io.netty', 'com.couchbase.client.deps.io.netty'
    relocate 'com.lmax', 'com.couchbase.client.deps.com.lmax'
    relocate 'com.fasterxml', 'com.couchbase.client.deps.com.fasterxml'
    relocate 'org.HdrHistogram', 'com.couchbase.client.deps.org.HdrHistogram'
    relocate 'org.LatencyUtils', 'com.couchbase.client.deps.org.LatencyUtils'
}

def pomConfig = {
    name 'Couchbase JVM Core IO'
    url 'http://couchbase.com'
    organization {
        name 'Couchbase, Inc.'
        url 'http://couchbase.com'
    }
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }
    scm {
        url 'https://github.com/couchbase/couchbase-jvm-core'
        connection 'scm:git:git://github.com/couchbase/couchbase-jvm-core'
        developerConnection 'scm:git:git://github.com/couchbase/couchbase-jvm-core'
    }
    issueManagement {
        system "Couchbase JIRA"
        url "http://www.couchbase.com/issues/browse/JVMCBC"
    }
    developers {
        developer {
            id 'daschl'
            name 'Michael Nitschinger'
            email 'michael.nitschinger@couchbase.com'
        }
        developer {
            id 'simonbasle'
            name 'Simon Basl√©'
            email 'simon@couchbase.com'
        }
        developer {
            id 'avsej'
            name 'Sergey Avseyev'
            email 'sergey@couchbase.com'
        }
    }
}

publishing  {
    publications {
        shadow(MavenPublication) {
            from components.shadow
            artifactId = 'core-io'

            artifact(javadocJar) {
                classifier = 'javadoc'
            }
            artifact(sourcesJar) {
                classifier = 'sources'
            }

            pom.withXml {
                def root = asNode()
                root.dependencies.'*'.findAll() {
                    it.scope*.value = 'compile'
                    if (it.artifactId.text() != 'rxjava') {
                        it.appendNode('optional', 'true')
                    }
                }
                // For some weird reason description does not work in pomConfig, so doing it manually here.
                root.appendNode('description', 'The official Couchbase JVM Core IO Library');
                root.children().last() + pomConfig
            }
        }
    }

    repositories {
        maven {
            url "$buildDir/repo"
        }
    }
}

jar.manifest.mainAttributes(
        'Implementation-Title': 'Couchbase Core IO',
        'Implementation-Version': ext.gitVersion,
        'Implementation-Vendor': 'Couchbase, Inc.',
        'Specification-Title': 'com.couchbase.client.core',
        'Specification-Version': version,
        'Specification-Vendor': 'Couchbase, Inc.'
)

afterEvaluate {
    //resources in src/main/resources will have @tokens@ replaced
    configure(processResources) {
        filter(ReplaceTokens,
                tokens: [specVersion: version, implVersion: getVersionName()])
    }
}

//utility method for shadowSources
void withFileSystem(URI uri, callback) {
    java.nio.file.FileSystem fileSystem = null
    try {
        fileSystem = java.nio.file.FileSystems.newFileSystem(uri, [:])
        callback(fileSystem)
    } catch (java.nio.file.FileSystemAlreadyExistsException e) {
        fileSystem = java.nio.file.FileSystems.getFileSystem(uri)
        callback(fileSystem)
    } finally {
        if (fileSystem != null) {
            fileSystem.close();
        }
    }
}

//a task that extracts the sources for relocated dependencies and rewrite them
// with corrected packages.
task shadowSources << {
    def componentIds = configurations.compile.incoming.resolutionResult.allDependencies
            .findAll {
                (it.selected.id.toString().startsWith('io.netty')
                || it.selected.id.toString().startsWith('com.fasterxml')
                || it.selected.id.toString().startsWith('com.lmax')
                || it.selected.id.toString().startsWith('org.latencyutils')
                || it.selected.id.toString().startsWith('org.hdrhistogram'))
    }
    .collect { it.selected.id }

    String jacksonPackage = "com.fasterxml.jackson"
    String disruptorPackage = "com.lmax.disruptor"
    String nettyPackage = "io.netty"
    String histogramPackage = "org.HdrHistogram"
    String latencyUtilsPackage = "org.LatencyUtils"

    String shadowedPackage = "com.couchbase.client.deps."
    String shadowedPath = shadowedPackage.replace('.', '/')

    java.nio.charset.Charset sourceCharset = java.nio.charset.StandardCharsets.UTF_8
    java.nio.file.Path shadowedSourceDir = file("build/shadow/src").toPath()

    def result = dependencies.createArtifactResolutionQuery()
            .forComponents(componentIds)
            .withArtifacts(JvmLibrary, SourcesArtifact)
            .execute()

    for (component in result.resolvedComponents) {
        component.getArtifacts(SourcesArtifact).each {
            int sourceFileCounter = 0

            withFileSystem(new URI("jar:file:" + it.file.absolutePath)) { sourceJarFileSystem ->

                zipTree(it.file).visit { element ->
                    String relativePath = element.relativePath.toString()
                    if (relativePath.startsWith("META-INF") || element.file.isDirectory() ||
                            !element.file.getName().endsWith(".java")) {
                        return
                    }
                    java.nio.file.Path shadowedFile = shadowedSourceDir.resolve(shadowedPath + relativePath)
                    if (Files.exists(shadowedFile)) {
                        return
                    }
                    if (!Files.exists(shadowedFile.getParent())) {
                        Files.createDirectories(shadowedFile.getParent())
                    }
                    sourceFileCounter++

                    java.nio.file.Path originalFile = sourceJarFileSystem.getPath(element.relativePath.toString())
                    String content = new String(Files.readAllBytes(originalFile), sourceCharset);

                    content = content.replaceAll(jacksonPackage, shadowedPackage + jacksonPackage)
                    content = content.replaceAll(disruptorPackage, shadowedPackage +  disruptorPackage)
                    content = content.replaceAll("([^.])" + nettyPackage, "\$1" + shadowedPackage + nettyPackage);
                    content = content.replaceAll(histogramPackage, shadowedPackage + histogramPackage);
                    content = content.replaceAll(latencyUtilsPackage, shadowedPackage + latencyUtilsPackage);
                    java.nio.file.Files.write(shadowedFile, content.getBytes(sourceCharset));
                }
            }

            if (sourceFileCounter > 0)
                println "Processing ${sourceFileCounter} sources for ${component.id} shadow sourceJar"
            else
                println "Nothing to do for ${component.id}"
        }
    }

    int totalProjectSource = 0
    int rewrittenProjectSource = 0
    sourceSets.main.allSource.visit { element ->
        totalProjectSource++
        String relativePath = element.relativePath.toString()
        java.nio.file.Path shadowedFile = shadowedSourceDir.resolve(relativePath)
        if (Files.exists(shadowedFile)) {
            return
        }
        if (!Files.exists(shadowedFile.getParent())) {
            Files.createDirectories(shadowedFile.getParent())
        }

        java.nio.file.Path originalFile = element.file.toPath()

        if (relativePath.startsWith("META-INF") || element.file.isDirectory() ||
                !element.file.getName().endsWith(".java")) {
            Files.copy(originalFile, shadowedFile, StandardCopyOption.COPY_ATTRIBUTES)
        } else {
            rewrittenProjectSource++
            String content = new String(Files.readAllBytes(originalFile), sourceCharset);
            content = content.replaceAll(jacksonPackage, shadowedPackage + jacksonPackage)
            content = content.replaceAll(disruptorPackage, shadowedPackage +  disruptorPackage)
            content = content.replaceAll("([^.])" + nettyPackage, "\$1" + shadowedPackage + nettyPackage);
            content = content.replaceAll(histogramPackage, shadowedPackage + histogramPackage);
            content = content.replaceAll(latencyUtilsPackage, shadowedPackage + latencyUtilsPackage);
            Files.write(shadowedFile, content.getBytes(sourceCharset));
        }
    }
    println "Rewritten ${totalProjectSource} sources out of ${totalProjectSource} source files for project sources."
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/reports/jacocoHtml"
    }
}